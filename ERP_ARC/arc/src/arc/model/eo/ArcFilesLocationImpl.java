package arc.model.eo;

import com.sd.util.adf.ADFUtils;
import com.sd.util.db.DBUtil;

import gen.common.GenLib;

import java.math.BigDecimal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import java.util.HashSet;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 03 19:31:55 GMT+03:00 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ArcFilesLocationImpl
  extends AuditEntityImpl
{
  /**
   * Validation method for MainLocationFk.
   */
  
  protected void create(AttributeList attributeList)
  {
    super.create(attributeList);
    setAppendixFl(new BigDecimal(0));
    setMilitaryFileFl(new BigDecimal(0));
    setOpenFl(new BigDecimal(1));
  }
  
  public boolean validateMainLocationFk(BigDecimal mainlocationfk)
  {
    String sql = "";
    if (mainlocationfk!=null && getDisplayFileLocationDesc() != null && getDepartmentsFk() != null )
    {
      sql = "SELECT COUNT(a.files_location_pk) FROM arc_files_location A," + 
      "arc_files_location_tl B " + 
      "WHERE  a.files_location_pk=b.files_location_fk " + 
      "AND a.departments_fk= " + getDepartmentsFk() + " " + 
      "AND a.main_location_fk=" + mainlocationfk + " " + 
      "AND b.file_location_desc='" + getDisplayFileLocationDesc() + "'";
    }
    
    if (mainlocationfk==null && getDisplayFileLocationDesc() != null && getDepartmentsFk() != null )
    {
      sql = "SELECT  COUNT(a.files_location_pk) FROM arc_files_location A," + 
      "arc_files_location_tl B" + 
      "WHERE  a.files_location_pk=b.files_location_fk " + 
      "AND  a.main_location_fk is null  and a.departments_fk= "+ getDepartmentsFk()+ " " + 
      "AND b.file_location_desc    ='"+ getDisplayFileLocationDesc() +"'";
    }
     
    
    int count = DBUtil.getQueryResultAsInt(sql);

     if(count != BigDecimal.ZERO.intValue())
     {
       throw new JboException(GenLib.getMessage("error.DuplicateCode"));
     }
    return true;
  }

  /**
   * Validation method for DisplayFileLocationDesc.
   */
  public boolean validateDisplayFileLocationDesc(String displayfilelocationdesc)
  {
    String sql = "";
    if (getMainLocationFk() != null && displayfilelocationdesc != null && getDepartmentsFk() != null )
    {
      sql = "SELECT  COUNT(a.files_location_pk)  FROM arc_files_location   A," + 
      "arc_files_location_tl  B " + 
      "WHERE  a.files_location_pk=b.files_location_fk " + 
      "AND a.departments_fk= "+ getDepartmentsFk()+ " " + 
      "AND a.main_location_fk="+ getMainLocationFk() + " " + 
      "AND b.file_location_desc='"+ displayfilelocationdesc + "'";
      
      int count = DBUtil.getQueryResultAsInt(sql);
      
      if(count != BigDecimal.ZERO.intValue())
      {
        throw new JboException(GenLib.getMessage("error.DuplicateCode"));
      }
    }
    return true;  
  }

  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
   */
  protected enum AttributesEnum
  {
    FilesLocationPk,
    MainLocationFk,
    DepartmentsFk,
    CreatedBy,
    CreationDate,
    ModifiedBy,
    ModifiedDate,
    UserDepartmentFk,
    DisplayFileLocationDesc,
    AppendixFl,
    FilesColumnsLockersFk,
    FilesLockersFk,
    FilesRowsColumnsLockersFk,
    MilitaryFileFl,
    OpenFl,
    TagsFk,
    AppendixMainFk,
    LimitedAccessFl,
    PublicAccessFl,
    ArcFilesLocation,
    MainLocationFkArcFilesLocation,
    ArcFilesLocationTl;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

    protected int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    protected static final int firstIndex()
    {
      return firstIndex;
    }

    protected static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    protected static final AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }


  public static final int FILESLOCATIONPK = AttributesEnum.FilesLocationPk.index();
  public static final int MAINLOCATIONFK = AttributesEnum.MainLocationFk.index();
  public static final int DEPARTMENTSFK = AttributesEnum.DepartmentsFk.index();
  public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
  public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
  public static final int MODIFIEDBY = AttributesEnum.ModifiedBy.index();
  public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
  public static final int USERDEPARTMENTFK = AttributesEnum.UserDepartmentFk.index();
  public static final int DISPLAYFILELOCATIONDESC = AttributesEnum.DisplayFileLocationDesc.index();
  public static final int APPENDIXFL = AttributesEnum.AppendixFl.index();
  public static final int FILESCOLUMNSLOCKERSFK = AttributesEnum.FilesColumnsLockersFk.index();
  public static final int FILESLOCKERSFK = AttributesEnum.FilesLockersFk.index();
  public static final int FILESROWSCOLUMNSLOCKERSFK = AttributesEnum.FilesRowsColumnsLockersFk.index();
  public static final int MILITARYFILEFL = AttributesEnum.MilitaryFileFl.index();
  public static final int OPENFL = AttributesEnum.OpenFl.index();
  public static final int TAGSFK = AttributesEnum.TagsFk.index();
  public static final int APPENDIXMAINFK = AttributesEnum.AppendixMainFk.index();
  public static final int LIMITEDACCESSFL = AttributesEnum.LimitedAccessFl.index();
  public static final int PUBLICACCESSFL = AttributesEnum.PublicAccessFl.index();
  public static final int ARCFILESLOCATION = AttributesEnum.ArcFilesLocation.index();
  public static final int MAINLOCATIONFKARCFILESLOCATION = AttributesEnum.MainLocationFkArcFilesLocation.index();
  public static final int ARCFILESLOCATIONTL = AttributesEnum.ArcFilesLocationTl.index();

  /**
   * This is the default constructor (do not remove).
   */
  public ArcFilesLocationImpl()
  {
  }

  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    return EntityDefImpl.findDefObject("arc.model.eo.ArcFilesLocation");
  }


  /**
   * Gets the attribute value for FilesLocationPk, using the alias name FilesLocationPk.
   * @return the value of FilesLocationPk
   */
  public BigDecimal getFilesLocationPk()
  {
    return (BigDecimal) getAttributeInternal(FILESLOCATIONPK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FilesLocationPk.
   * @param value value to set the FilesLocationPk
   */
  public void setFilesLocationPk(BigDecimal value)
  {
    setAttributeInternal(FILESLOCATIONPK, value);
  }

  /**
   * Gets the attribute value for MainLocationFk, using the alias name MainLocationFk.
   * @return the value of MainLocationFk
   */
  public BigDecimal getMainLocationFk()
  {
    return (BigDecimal) getAttributeInternal(MAINLOCATIONFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for MainLocationFk.
   * @param value value to set the MainLocationFk
   */
  public void setMainLocationFk(BigDecimal value)
  {
    setAttributeInternal(MAINLOCATIONFK, value);
  }

  /**
   * Gets the attribute value for DepartmentsFk, using the alias name DepartmentsFk.
   * @return the value of DepartmentsFk
   */
  public BigDecimal getDepartmentsFk()
  {
    return (BigDecimal) getAttributeInternal(DEPARTMENTSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for DepartmentsFk.
   * @param value value to set the DepartmentsFk
   */
  public void setDepartmentsFk(BigDecimal value)
  {
    setAttributeInternal(DEPARTMENTSFK, value);
  }

  /**
   * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
   * @return the value of CreatedBy
   */
  public BigDecimal getCreatedBy()
  {
    return (BigDecimal) getAttributeInternal(CREATEDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for CreatedBy.
   * @param value value to set the CreatedBy
   */
  public void setCreatedBy(BigDecimal value)
  {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   * Gets the attribute value for CreationDate, using the alias name CreationDate.
   * @return the value of CreationDate
   */
  public Timestamp getCreationDate()
  {
    return (Timestamp) getAttributeInternal(CREATIONDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for CreationDate.
   * @param value value to set the CreationDate
   */
  public void setCreationDate(Timestamp value)
  {
    setAttributeInternal(CREATIONDATE, value);
  }

  /**
   * Gets the attribute value for ModifiedBy, using the alias name ModifiedBy.
   * @return the value of ModifiedBy
   */
  public BigDecimal getModifiedBy()
  {
    return (BigDecimal) getAttributeInternal(MODIFIEDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for ModifiedBy.
   * @param value value to set the ModifiedBy
   */
  public void setModifiedBy(BigDecimal value)
  {
    setAttributeInternal(MODIFIEDBY, value);
  }

  /**
   * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
   * @return the value of ModifiedDate
   */
  public Timestamp getModifiedDate()
  {
    return (Timestamp) getAttributeInternal(MODIFIEDDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for ModifiedDate.
   * @param value value to set the ModifiedDate
   */
  public void setModifiedDate(Timestamp value)
  {
    setAttributeInternal(MODIFIEDDATE, value);
  }

  /**
   * Gets the attribute value for UserDepartmentFk, using the alias name UserDepartmentFk.
   * @return the value of UserDepartmentFk
   */
  public BigDecimal getUserDepartmentFk()
  {
    return (BigDecimal) getAttributeInternal(USERDEPARTMENTFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for UserDepartmentFk.
   * @param value value to set the UserDepartmentFk
   */
  public void setUserDepartmentFk(BigDecimal value)
  {
    setAttributeInternal(USERDEPARTMENTFK, value);
  }

  /**
   * Gets the attribute value for DisplayFileLocationDesc, using the alias name DisplayFileLocationDesc.
   * @return the value of DisplayFileLocationDesc
   */
  public String getDisplayFileLocationDesc()
  {
    return (String) getAttributeInternal(DISPLAYFILELOCATIONDESC);
  }

  /**
   * Sets <code>value</code> as the attribute value for DisplayFileLocationDesc.
   * @param value value to set the DisplayFileLocationDesc
   */
  public void setDisplayFileLocationDesc(String value)
  {
    setAttributeInternal(DISPLAYFILELOCATIONDESC, value);
  }

  /**
   * Gets the attribute value for AppendixFl, using the alias name AppendixFl.
   * @return the value of AppendixFl
   */
  public BigDecimal getAppendixFl()
  {
    return (BigDecimal) getAttributeInternal(APPENDIXFL);
  }

  /**
   * Sets <code>value</code> as the attribute value for AppendixFl.
   * @param value value to set the AppendixFl
   */
  public void setAppendixFl(BigDecimal value)
  {
    setAttributeInternal(APPENDIXFL, value);
  }

  /**
   * Gets the attribute value for FilesColumnsLockersFk, using the alias name FilesColumnsLockersFk.
   * @return the value of FilesColumnsLockersFk
   */
  public BigDecimal getFilesColumnsLockersFk()
  {
    return (BigDecimal) getAttributeInternal(FILESCOLUMNSLOCKERSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FilesColumnsLockersFk.
   * @param value value to set the FilesColumnsLockersFk
   */
  public void setFilesColumnsLockersFk(BigDecimal value)
  {
    setAttributeInternal(FILESCOLUMNSLOCKERSFK, value);
  }

  /**
   * Gets the attribute value for FilesLockersFk, using the alias name FilesLockersFk.
   * @return the value of FilesLockersFk
   */
  public BigDecimal getFilesLockersFk()
  {
    return (BigDecimal) getAttributeInternal(FILESLOCKERSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FilesLockersFk.
   * @param value value to set the FilesLockersFk
   */
  public void setFilesLockersFk(BigDecimal value)
  {
    setAttributeInternal(FILESLOCKERSFK, value);
  }

  /**
   * Gets the attribute value for FilesRowsColumnsLockersFk, using the alias name FilesRowsColumnsLockersFk.
   * @return the value of FilesRowsColumnsLockersFk
   */
  public BigDecimal getFilesRowsColumnsLockersFk()
  {
    return (BigDecimal) getAttributeInternal(FILESROWSCOLUMNSLOCKERSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FilesRowsColumnsLockersFk.
   * @param value value to set the FilesRowsColumnsLockersFk
   */
  public void setFilesRowsColumnsLockersFk(BigDecimal value)
  {
    setAttributeInternal(FILESROWSCOLUMNSLOCKERSFK, value);
  }

  /**
   * Gets the attribute value for MilitaryFileFl, using the alias name MilitaryFileFl.
   * @return the value of MilitaryFileFl
   */
  public BigDecimal getMilitaryFileFl()
  {
    return (BigDecimal) getAttributeInternal(MILITARYFILEFL);
  }

  /**
   * Sets <code>value</code> as the attribute value for MilitaryFileFl.
   * @param value value to set the MilitaryFileFl
   */
  public void setMilitaryFileFl(BigDecimal value)
  {
    setAttributeInternal(MILITARYFILEFL, value);
  }

  /**
   * Gets the attribute value for OpenFl, using the alias name OpenFl.
   * @return the value of OpenFl
   */
  public BigDecimal getOpenFl()
  {
    return (BigDecimal) getAttributeInternal(OPENFL);
  }

  /**
   * Sets <code>value</code> as the attribute value for OpenFl.
   * @param value value to set the OpenFl
   */
  public void setOpenFl(BigDecimal value)
  {
    setAttributeInternal(OPENFL, value);
  }

  /**
   * Gets the attribute value for TagsFk, using the alias name TagsFk.
   * @return the value of TagsFk
   */
  public BigDecimal getTagsFk()
  {
    return (BigDecimal) getAttributeInternal(TAGSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for TagsFk.
   * @param value value to set the TagsFk
   */
  public void setTagsFk(BigDecimal value)
  {
    setAttributeInternal(TAGSFK, value);
  }

  /**
   * Gets the attribute value for AppendixMainFk, using the alias name AppendixMainFk.
   * @return the value of AppendixMainFk
   */
  public BigDecimal getAppendixMainFk()
  {
    return (BigDecimal) getAttributeInternal(APPENDIXMAINFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for AppendixMainFk.
   * @param value value to set the AppendixMainFk
   */
  public void setAppendixMainFk(BigDecimal value)
  {
    setAttributeInternal(APPENDIXMAINFK, value);
  }

  /**
   * Gets the attribute value for LimitedAccessFl, using the alias name LimitedAccessFl.
   * @return the value of LimitedAccessFl
   */
  public BigDecimal getLimitedAccessFl()
  {
    return (BigDecimal) getAttributeInternal(LIMITEDACCESSFL);
  }

  /**
   * Sets <code>value</code> as the attribute value for LimitedAccessFl.
   * @param value value to set the LimitedAccessFl
   */
  public void setLimitedAccessFl(BigDecimal value)
  {
    setAttributeInternal(LIMITEDACCESSFL, value);
  }

  /**
   * Gets the attribute value for PublicAccessFl, using the alias name PublicAccessFl.
   * @return the value of PublicAccessFl
   */
  public BigDecimal getPublicAccessFl()
  {
    return (BigDecimal) getAttributeInternal(PUBLICACCESSFL);
  }

  /**
   * Sets <code>value</code> as the attribute value for PublicAccessFl.
   * @param value value to set the PublicAccessFl
   */
  public void setPublicAccessFl(BigDecimal value)
  {
    setAttributeInternal(PUBLICACCESSFL, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getArcFilesLocation()
  {
    return (RowIterator) getAttributeInternal(ARCFILESLOCATION);
  }

  /**
   * @return the associated entity ArcFilesLocationImpl.
   */
  public ArcFilesLocationImpl getMainLocationFkArcFilesLocation()
  {
    return (ArcFilesLocationImpl) getAttributeInternal(MAINLOCATIONFKARCFILESLOCATION);
  }

  /**
   * Sets <code>value</code> as the associated entity ArcFilesLocationImpl.
   */
  public void setMainLocationFkArcFilesLocation(ArcFilesLocationImpl value)
  {
    setAttributeInternal(MAINLOCATIONFKARCFILESLOCATION, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getArcFilesLocationTl()
  {
    return (RowIterator) getAttributeInternal(ARCFILESLOCATIONTL);
  }


  /**
   * @param filesLocationPk key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(BigDecimal filesLocationPk)
  {
    return new Key(new Object[] { filesLocationPk });
  }

  public void updateChild(BigDecimal fls_locations_pk)
  {
    PreparedStatement parentStat = null;
    PreparedStatement updateStat = null;
    ResultSet updateRS = null;
    DBTransactionImpl dbTransaction = (DBTransactionImpl)getDBTransaction();
    String parentSql = "select * from arc_files_location where main_location_fk = " + fls_locations_pk;

    try
    {
      parentStat = dbTransaction.createPreparedStatement(parentSql, 1);
      updateRS = parentStat.executeQuery();
      while (updateRS.next())
      {
        BigDecimal files_location_pk_new = updateRS.getBigDecimal("files_location_pk");
        String updateSql = "UPDATE arc_files_location SET open_fl = " + getOpenFl() + 
                           " WHERE  files_location_pk = " + files_location_pk_new;
        updateStat = dbTransaction.createPreparedStatement(updateSql, 1);
        updateStat.executeUpdate();
        updateChild(files_location_pk_new);
      }
      DBUtil.close(updateRS);
    }
    catch (Exception ee)
    {
      GenLib.handleException(ee);
    }
    finally
    {
      DBUtil.close(updateRS);
      DBUtil.close(parentStat);
      DBUtil.close(updateStat);
    }
  }

  private void preventCircularReference(String sql, Number vParent, String dParent)
  {
    PreparedStatement stat = null;
    ResultSet rs = null;
    if (vParent != null)
    {
      HashSet<Long> dataSet = new HashSet<Long>();
      if (getFilesLocationPk() != null) // if primary key not null
      {
        dataSet.add(getFilesLocationPk().longValue());
      }

      dataSet.add(vParent.longValue());
      stat = getDBTransaction().createPreparedStatement(sql, 1);
      long master = vParent.longValue();
      try
      {
        while (true)
        {
          stat.setLong(1, master);
          rs = stat.executeQuery();
          try
          {
            boolean b = rs.next();
            if (b == false)
            {
              break;
            }
            else
            {
              master = rs.getLong(dParent);
              boolean add = dataSet.add(master);
              if (add == false)
              {
                throw new JboException(GenLib.getMessage("error.circularRef3") + " -- " + getFilesLocationPk() + " -- " +
                                       GenLib.getMessage("error.circularRef4"));
              }
            }
          }
          catch (Exception sqle)
          {
            if (sqle instanceof JboException)
            {
              throw sqle;
            }
          }
          finally
          {
            DBUtil.close(rs);
          }
        }
      }
      catch (Exception sqle)
      {
        if (sqle instanceof JboException)
        {
          throw (JboException) sqle;
        }
        sqle.printStackTrace();
      }
      finally
      {
        DBUtil.close(rs);
        DBUtil.close(stat);
      }
    }
  }
  
  protected void doDML(int operation, oracle.jbo.server.TransactionEvent e)
  {
    // prevent circular reference
    if (operation == DML_INSERT || operation == DML_UPDATE)
    {
      if (getMainLocationFk() != null)
      {
        String sql = "SELECT * FROM ARC_FILES_LOCATION WHERE FILES_LOCATION_PK = ? AND FILES_LOCATION_PK IS NOT NULL";
        preventCircularReference(sql, getMainLocationFk(), "MAIN_LOCATION_FK");
      }
    }

    if ( operation == DML_UPDATE)
    {
      if (getMainLocationFk() != null && getFilesLocationPk()!=null)
      {
        if (getMainLocationFk().equals(getFilesLocationPk()))
        {
          throw new JboException(GenLib.getMessage("error.MainLocationFk"));
        }
      }
    }
    
    if ( operation == DML_INSERT)
    {
      if (getMainLocationFk() == null && getDisplayFileLocationDesc() != null &&getDepartmentsFk() != null )
      {
        String sql = "SELECT  COUNT(a.files_location_pk)  FROM arc_files_location   A," + 
        "arc_files_location_tl  B " + 
        "WHERE  a.files_location_pk=b.files_location_fk " + 
        "AND  a.main_location_fk is null  and a.departments_fk= "+ getDepartmentsFk()+ " " + 
        "AND b.file_location_desc    ='"+ getDisplayFileLocationDesc() +"'";
        int count = DBUtil.getQueryResultAsInt(sql);
        if(count != BigDecimal.ZERO.intValue())
        {
          throw new JboException(GenLib.getMessage("error.DuplicateCode"));
        }
      }
    }
    
    if (operation == DML_UPDATE)
    {
      if (isAttributeChanged("DisplayFileLocationDesc"))
      {
        if (getMainLocationFk() == null && getDisplayFileLocationDesc() != null && getDepartmentsFk() != null )
        {
          String sql = "SELECT  COUNT(a.files_location_pk) FROM arc_files_location A," + 
          "arc_files_location_tl  B " + 
          "WHERE  a.files_location_pk=b.files_location_fk " + 
          "AND  a.main_location_fk is null  and a.departments_fk= "+ getDepartmentsFk()+ " " + 
          "AND b.file_location_desc    ='"+ getDisplayFileLocationDesc() +"'";
          int count = DBUtil.getQueryResultAsInt(sql);
          if(count != BigDecimal.ZERO.intValue())
          {
            throw new JboException(GenLib.getMessage("error.DuplicateCode"));
          }
        }
      }
    }
    
    if (operation == DML_UPDATE)
    {
      if (isAttributeChanged("OpenFl") && (getOpenFl() == null || getOpenFl().intValue() == 0) )
      {
        PreparedStatement parentStat = null;
        PreparedStatement updateStat = null;
        ResultSet updateRS = null;
        DBTransactionImpl dbTransaction = (DBTransactionImpl) ADFUtils.getDefaultDBTransaction();
        String parentSql = "select * from arc_files_location  where main_location_fk = " + getFilesLocationPk();
        try
        {
          parentStat = dbTransaction.createPreparedStatement(parentSql, 1);
          updateRS = parentStat.executeQuery();
          while (updateRS.next())
          {
            BigDecimal files_location_pk = updateRS.getBigDecimal("files_location_pk");
            String updateSql =
              "UPDATE arc_files_location SET open_fl = " + getOpenFl() + " WHERE  files_location_pk = " + files_location_pk;
            updateStat = dbTransaction.createPreparedStatement(updateSql, 1);
            updateStat.executeUpdate();
            updateChild(files_location_pk);
          }
          DBUtil.close(updateRS);
        }
        catch (Exception ee)
        {
          GenLib.handleException(ee);
        }
        finally
        {
          DBUtil.close(updateRS);
          DBUtil.close(parentStat);
          DBUtil.close(updateStat);
        }
      }
    }
    
    super.doDML(operation, e);

    if ( operation == DML_INSERT )
    {
      BigDecimal pk = gen.common.GenLib.getPrimaryKeyValue(getDBTransaction(), "ARC_FILES_LOCATION_SEQ");
      setFilesLocationPk(pk);
      oracle.jbo.server.EntityDefImpl def = ArcFilesLocationTlImpl.getDefinitionObject();
      java.util.List<Integer> lang = gen.common.GenLib.getActiveDataLanguages(getDBTransaction());
      for (int i = 0; i < lang.size(); i++)
      {
        ArcFilesLocationTlImpl tl = (ArcFilesLocationTlImpl)def.createInstance2(getDBTransaction(), null);
        tl.setLanguagesFk(new BigDecimal(lang.get(i)));
        tl.setFileLocationDesc(getDisplayFileLocationDesc());
        tl.setFilesLocationFk(getFilesLocationPk());
      }
    }
  }
  
  public void remove()
  {
    gen.common.GenLib.removeTranlationRows(getArcFilesLocationTl());
    super.remove();
  }
}