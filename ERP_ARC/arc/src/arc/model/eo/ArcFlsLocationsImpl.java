package arc.model.eo;

import com.sd.util.db.DBUtil;

import gen.common.GenLib;

import java.math.BigDecimal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import java.util.HashSet;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 03 19:32:13 GMT+03:00 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ArcFlsLocationsImpl
  extends AuditEntityImpl
{
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
   */
  protected enum AttributesEnum
  {
    FlsLocationsPk,
    MainLocationFk,
    FlStandardsFk,
    CreatedBy,
    CreationDate,
    ModifiedBy,
    ModifiedDate,
    UserDepartmentFk,
    DisplayFileLocationDesc,
    DisplayNotes,
    ArcFlsLocations,
    MainLocationFkArcFlsLocations,
    ArcFlsLocationsTl,
    ArcFlStandards;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

    protected int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    protected static final int firstIndex()
    {
      return firstIndex;
    }

    protected static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    protected static final AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }


  public static final int FLSLOCATIONSPK = AttributesEnum.FlsLocationsPk.index();
  public static final int MAINLOCATIONFK = AttributesEnum.MainLocationFk.index();
  public static final int FLSTANDARDSFK = AttributesEnum.FlStandardsFk.index();
  public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
  public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
  public static final int MODIFIEDBY = AttributesEnum.ModifiedBy.index();
  public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
  public static final int USERDEPARTMENTFK = AttributesEnum.UserDepartmentFk.index();
  public static final int DISPLAYFILELOCATIONDESC = AttributesEnum.DisplayFileLocationDesc.index();
  public static final int DISPLAYNOTES = AttributesEnum.DisplayNotes.index();
  public static final int ARCFLSLOCATIONS = AttributesEnum.ArcFlsLocations.index();
  public static final int MAINLOCATIONFKARCFLSLOCATIONS = AttributesEnum.MainLocationFkArcFlsLocations.index();
  public static final int ARCFLSLOCATIONSTL = AttributesEnum.ArcFlsLocationsTl.index();
  public static final int ARCFLSTANDARDS = AttributesEnum.ArcFlStandards.index();

  /**
   * This is the default constructor (do not remove).
   */
  public ArcFlsLocationsImpl()
  {
  }

  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    return EntityDefImpl.findDefObject("arc.model.eo.ArcFlsLocations");
  }


  /**
   * Gets the attribute value for FlsLocationsPk, using the alias name FlsLocationsPk.
   * @return the value of FlsLocationsPk
   */
  public BigDecimal getFlsLocationsPk()
  {
    return (BigDecimal) getAttributeInternal(FLSLOCATIONSPK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FlsLocationsPk.
   * @param value value to set the FlsLocationsPk
   */
  public void setFlsLocationsPk(BigDecimal value)
  {
    setAttributeInternal(FLSLOCATIONSPK, value);
  }

  /**
   * Gets the attribute value for MainLocationFk, using the alias name MainLocationFk.
   * @return the value of MainLocationFk
   */
  public BigDecimal getMainLocationFk()
  {
    return (BigDecimal) getAttributeInternal(MAINLOCATIONFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for MainLocationFk.
   * @param value value to set the MainLocationFk
   */
  public void setMainLocationFk(BigDecimal value)
  {
    setAttributeInternal(MAINLOCATIONFK, value);
  }

  /**
   * Gets the attribute value for FlStandardsFk, using the alias name FlStandardsFk.
   * @return the value of FlStandardsFk
   */
  public BigDecimal getFlStandardsFk()
  {
    return (BigDecimal) getAttributeInternal(FLSTANDARDSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FlStandardsFk.
   * @param value value to set the FlStandardsFk
   */
  public void setFlStandardsFk(BigDecimal value)
  {
    setAttributeInternal(FLSTANDARDSFK, value);
  }

  /**
   * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
   * @return the value of CreatedBy
   */
  public BigDecimal getCreatedBy()
  {
    return (BigDecimal) getAttributeInternal(CREATEDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for CreatedBy.
   * @param value value to set the CreatedBy
   */
  public void setCreatedBy(BigDecimal value)
  {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   * Gets the attribute value for CreationDate, using the alias name CreationDate.
   * @return the value of CreationDate
   */
  public Timestamp getCreationDate()
  {
    return (Timestamp) getAttributeInternal(CREATIONDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for CreationDate.
   * @param value value to set the CreationDate
   */
  public void setCreationDate(Timestamp value)
  {
    setAttributeInternal(CREATIONDATE, value);
  }

  /**
   * Gets the attribute value for ModifiedBy, using the alias name ModifiedBy.
   * @return the value of ModifiedBy
   */
  public BigDecimal getModifiedBy()
  {
    return (BigDecimal) getAttributeInternal(MODIFIEDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for ModifiedBy.
   * @param value value to set the ModifiedBy
   */
  public void setModifiedBy(BigDecimal value)
  {
    setAttributeInternal(MODIFIEDBY, value);
  }

  /**
   * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
   * @return the value of ModifiedDate
   */
  public Timestamp getModifiedDate()
  {
    return (Timestamp) getAttributeInternal(MODIFIEDDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for ModifiedDate.
   * @param value value to set the ModifiedDate
   */
  public void setModifiedDate(Timestamp value)
  {
    setAttributeInternal(MODIFIEDDATE, value);
  }

  /**
   * Gets the attribute value for UserDepartmentFk, using the alias name UserDepartmentFk.
   * @return the value of UserDepartmentFk
   */
  public BigDecimal getUserDepartmentFk()
  {
    return (BigDecimal) getAttributeInternal(USERDEPARTMENTFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for UserDepartmentFk.
   * @param value value to set the UserDepartmentFk
   */
  public void setUserDepartmentFk(BigDecimal value)
  {
    setAttributeInternal(USERDEPARTMENTFK, value);
  }

  /**
   * Gets the attribute value for DisplayFileLocationDesc, using the alias name DisplayFileLocationDesc.
   * @return the value of DisplayFileLocationDesc
   */
  public String getDisplayFileLocationDesc()
  {
    return (String) getAttributeInternal(DISPLAYFILELOCATIONDESC);
  }

  /**
   * Sets <code>value</code> as the attribute value for DisplayFileLocationDesc.
   * @param value value to set the DisplayFileLocationDesc
   */
  public void setDisplayFileLocationDesc(String value)
  {
    setAttributeInternal(DISPLAYFILELOCATIONDESC, value);
  }

  /**
   * Gets the attribute value for DisplayNotes, using the alias name DisplayNotes.
   * @return the value of DisplayNotes
   */
  public String getDisplayNotes()
  {
    return (String) getAttributeInternal(DISPLAYNOTES);
  }

  /**
   * Sets <code>value</code> as the attribute value for DisplayNotes.
   * @param value value to set the DisplayNotes
   */
  public void setDisplayNotes(String value)
  {
    setAttributeInternal(DISPLAYNOTES, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getArcFlsLocations()
  {
    return (RowIterator) getAttributeInternal(ARCFLSLOCATIONS);
  }

  /**
   * @return the associated entity ArcFlsLocationsImpl.
   */
  public ArcFlsLocationsImpl getMainLocationFkArcFlsLocations()
  {
    return (ArcFlsLocationsImpl) getAttributeInternal(MAINLOCATIONFKARCFLSLOCATIONS);
  }

  /**
   * Sets <code>value</code> as the associated entity ArcFlsLocationsImpl.
   */
  public void setMainLocationFkArcFlsLocations(ArcFlsLocationsImpl value)
  {
    setAttributeInternal(MAINLOCATIONFKARCFLSLOCATIONS, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getArcFlsLocationsTl()
  {
    return (RowIterator) getAttributeInternal(ARCFLSLOCATIONSTL);
  }

  /**
   * @return the associated entity ArcFlStandardsImpl.
   */
  public ArcFlStandardsImpl getArcFlStandards()
  {
    return (ArcFlStandardsImpl) getAttributeInternal(ARCFLSTANDARDS);
  }

  /**
   * Sets <code>value</code> as the associated entity ArcFlStandardsImpl.
   */
  public void setArcFlStandards(ArcFlStandardsImpl value)
  {
    setAttributeInternal(ARCFLSTANDARDS, value);
  }


  /**
   * @param flsLocationsPk key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(BigDecimal flsLocationsPk)
  {
    return new Key(new Object[] { flsLocationsPk });
  }

  private void preventCircularReference(String sql, Number vParent, String dParent)
  {

    PreparedStatement stat = null;
    ResultSet rs = null;
    if (vParent != null)
    {
      HashSet<Long> dataSet = new HashSet<Long>();
      if (getFlsLocationsPk() != null) // if primary key not null
      {
        dataSet.add(getFlsLocationsPk().longValue());
      }

      dataSet.add(vParent.longValue());
      stat = getDBTransaction().createPreparedStatement(sql, 1);
      long master = vParent.longValue();
      try
      {
        while (true)
        {
          stat.setLong(1, master);
          rs = stat.executeQuery();
          try
          {
            boolean b = rs.next();
            if (b == false)
            {
              break;
            }
            else
            {
              master = rs.getLong(dParent);
              boolean add = dataSet.add(master);
              if (add == false)
              {
                throw new JboException(GenLib.getMessage("error.circularRef3") + " -- " + getFlsLocationsPk() + " -- " +
                                       GenLib.getMessage("error.circularRef4"));
              }
            }
          }
          catch (Exception sqle)
          {
            if (sqle instanceof JboException)
            {
              throw sqle;
            }
          }
          finally
          {
            DBUtil.close(rs);
          }
        }
      }
      catch (Exception sqle)
      {
        if (sqle instanceof JboException)
        {
          throw (JboException) sqle;
        }
        sqle.printStackTrace();
      }
      finally
      {
        DBUtil.close(rs);
        DBUtil.close(stat);
      }
    }
  }
  protected void doDML(int operation, oracle.jbo.server.TransactionEvent e)
  {
    
    
    // prevent circular reference
    if (operation == DML_INSERT || operation == DML_UPDATE)
    {
      if (getMainLocationFk() != null)
      {
        String sql = "SELECT * FROM ARC_FLS_LOCATIONS WHERE FLS_LOCATIONS_PK = ? AND FLS_LOCATIONS_PK IS NOT NULL";
        preventCircularReference(sql, getMainLocationFk(), "MAIN_LOCATION_FK");
      }

    }
    if ( operation == DML_UPDATE)
    {
    if (getMainLocationFk() != null && getFlsLocationsPk()!=null)
      {
      if (getMainLocationFk().equals(getFlsLocationsPk()))
        {
        throw new JboException(GenLib.getMessage("error.MainLocationFk"));
        }
      }
    }
    super.doDML(operation, e);

    if ( operation == DML_INSERT )
    {
      BigDecimal pk = gen.common.GenLib.getPrimaryKeyValue(getDBTransaction(), "ARC_FLS_LOCATIONS_SEQ");
      setFlsLocationsPk(pk);
      oracle.jbo.server.EntityDefImpl def = ArcFlsLocationsTlImpl.getDefinitionObject();
      java.util.List<Integer> lang = gen.common.GenLib.getActiveDataLanguages(getDBTransaction());
      for (int i = 0; i < lang.size(); i++)
      {
        ArcFlsLocationsTlImpl tl = (ArcFlsLocationsTlImpl)def.createInstance2(getDBTransaction(), null);
        tl.setLanguagesFk(new BigDecimal(lang.get(i)));
        tl.setFileLocationDesc(getDisplayFileLocationDesc());
        tl.setFlsLocationsFk(getFlsLocationsPk());
        tl.setNotes(getDisplayNotes());
      }
    }
  }


  public void remove()
  {
    gen.common.GenLib.removeTranlationRows(getArcFlsLocationsTl());
    super.remove();
  }

}

